<?xml version="1.0"?>

<!--
==============================================================================

 Seda build file

Type 'ant' to build. The flag '-projecthelp' will list normal targets. If
combined with '-verbose', all targets are printed.

Authors:
 Federico Barbieri <scoobie@apache.org>
 Berin Loritsch <bloritsch@apache.org>
 Peter Donald <peter@apache.org>

Legal:
  Copyright (c) 1999-2000 The Apache Software Foundation. All Rights Reserved.

==============================================================================
-->

<project name="SandStorm" default="main" basedir=".">

  <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
  -->
  <property file=".ant.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <property name="name" value="seda"/>
  <property name="Name" value="Seda"/>
  <property name="library.name" value="nbio"/>
  <property name="framework.name" value="sandstorm"/>
  <property name="version" value="20021014"/>
  <property name="year" value="2002"/>

  <property name="debug" value="on"/>
  <property name="optimize" value="off"/>
  <property name="deprecation" value="off"/>

  <!-- Set the properties for intermediate directory -->
  <property name="build.dir" value="build"/>
  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="build.src" value="${build.dir}/src"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.javadocs" value="${build.dir}/javadocs"/>
  <property name="build.docs" value="${build.dir}/docs"/>
  <property name="build.testdocs" value="${build.docs}/test"/>
  <property name="build.reports" value="${build.dir}/reports"/>
  <property name="build.context" value="${build.dir}/documentation"/>

  <!-- Set the properties for source directories -->
  <property name="src.dir" value="src"/>
  <property name="java.dir" value="${src.dir}/java"/>
  <property name="test.dir" value="${src.dir}/test"/>
  <property name="lib.dir" value="lib"/>
  <property name="tools.dir" value="tools"/>
  <property name="jni.dir" value="${src.dir}/jni"/>
  <property name="docs.dir" value="docs"/>
  <property name="www.dir" value="../jakarta-avalon-site/docs"/>
  <property name="javadocs.dir" value="${docs.dir}/api"/>
  <property name="skins.dir" value="${src.dir}/skins"/>
  <property name="context.dir" value="${src.dir}/documentation"/>
  <property name="stylesheets.dir" value="${skins.dir}"/>

  <property name="dist.name" value="${Name}-${version}"/>
  <property name="dist.base" value="distributions"/>

  <property name="tools.jar" value="${java.home}/../lib/tools.jar"/>

  <property name="xerces.jar" value="${lib.dir}/lib/xerces-1.4.4.jar"/>
  <property name="junit.jar" value="${lib.dir}/lib/junit-3.7.jar"/>

  <path id="project.class.path">
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement path="${java.class.path}" />
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
      <exclude name="xerces*.jar"/>
    </fileset>
    <pathelement path="${build.classes}" />
  </path>

  <path id="test.class.path">
    <path refid="project.class.path"/>
  </path>

  <!-- Main target -->
  <target name="main" depends="all" description="generates the Avalon distribution without the javadocs"/>

  <!-- Help on usage -->
  <target name="usage">
    <echo message="Use the -projecthelp option instead"/>
  </target>

  <target name="help" depends="usage"/>

  <!-- Set up dist properties -->
  <target name="setup-properties" >
    <available property="log4j.present" classname="org.apache.log4j.Category">
      <classpath refid="project.class.path"/>
    </available>
    <available property="jdk14.present" classname="java.nio.channel.Channel">
      <classpath refid="project.class.path"/>
    </available>

    <property name="dist.dir" value="dist"/>
    <property name="dist.bin" value="${dist.dir}/bin"/>
    <property name="dist.apps" value="${dist.dir}/apps"/>
    <property name="dist.lib" value="${dist.dir}/lib"/>
    <property name="dist.docs" value="${dist.dir}/docs"/>
    <property name="dist.javadocs" value="${dist.dir}/docs/api"/>

    <property name="src.dist.dir" value="dist-src"/>
    <property name="src.dist.src" value="${src.dist.dir}/src"/>
    <property name="src.dist.docs" value="${src.dist.dir}/docs"/>
    <property name="src.dist.javadocs" value="${src.dist.dir}/docs/api"/>
    <property name="src.dist.lib" value="${src.dist.dir}/lib"/>
    <property name="src.dist.tools" value="${src.dist.dir}/tools"/>
  </target>

  <!-- Prepares the build directory -->
  <target name="prepare" depends="setup-properties">
    <tstamp/>
    <mkdir dir="${build.dir}"/>
  </target>

  <!-- Compiles the source code -->
  <target name="compile" depends="prepare" description="compiles the source code">

    <mkdir dir="${build.classes}"/>

    <javac srcdir="${java.dir}"
           destdir="${build.classes}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
      <classpath refid="project.class.path" />
      <src path="${test.dir}"/>
    </javac>
  </target>

  <target name="test" depends="check"/>

  <target name="check" depends="compile" description="perform unit tests">
    <echo message="Seda Framework is mostly native libraries."/>
    <echo message="But some tests to be performed at this time."/>

    <mkdir dir="${build.reports}"/>

    <echo message="Performing Unit Tests" />
    <junit fork="true" printsummary="yes" dir="${build.reports}">
      <formatter type="plain"/>
      <classpath>
        <path refid="test.class.path"/>
        <pathelement location="${build.classes}"/>
      </classpath>
      <batchtest todir="${build.reports}">
        <fileset dir="${build.classes}">
          <include name="**/test/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>

  </target>

  <target name="test-report" depends="compile" >
    <mkdir dir="${build.testdocs}"/>
    <mkdir dir="${build.reports}"/>

    <echo message="Performing Unit Tests" />
    <junit fork="true" printsummary="yes" dir="${build.reports}">
      <formatter type="xml"/>
      <classpath>
        <path refid="test.class.path"/>
        <pathelement location="${build.classes}"/>
      </classpath>
      <batchtest todir="${build.reports}">
        <fileset dir="${build.classes}">
          <exclude name="**/test/Abstract*TestCase.class"/>
          <include name="**/test/*Profile.class" if="test.profile"/>
          <include name="**/test/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${build.reports}">
      <fileset dir="${build.reports}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${build.testdocs}"/>
    </junitreport>
  </target>

  <target name="printerdocs" depends="javadocs">
    <echo message="Printer Friendly documentation is not yet available"/>
  </target>

  <!-- Prepares the documentation directory -->
  <target name="docs" depends="prepare,javadocs" description="generates the Avalon documentation"/>

  <!-- Create the API documentation -->
  <target name="javadocs" description="generates the API documentation (java 1.2+ only)">

    <delete dir="${build.javadocs}"/>
    <mkdir dir="${build.javadocs}"/>

    <javadoc packagenames="mdw.*"
             sourcepath="${java.dir}"
             destdir="${build.javadocs}">
      <classpath refid="project.class.path" />
      <doclet name="com.sun.tools.doclets.standard.Standard">
       <param name="-author"/>
       <param name="-version"/>
       <param name="-doctitle" value="${Name}"/>
       <param name="-windowtitle" value="${Name} API"/>
       <param name="-bottom"
              value="&quot;Copyright &#169; 2001 Apache Jakarta Project. All Rights Reserved.&quot;"/>
      </doclet>
    </javadoc>

  </target>

  <!-- Create the Local site documentation -->
  <target name="local-xdocs" depends="docs">

    <delete>
      <fileset dir="${docs.dir}">
        <exclude name="api/**"/>
      </fileset>
    </delete>
    <mkdir dir="${docs.dir}"/>

    <copy todir="${docs.dir}">
      <fileset dir="${build.docs}" />
    </copy>

  </target>

  <!-- Create the Local API documentation -->
  <target name="local-javadocs" depends="javadocs">

    <delete dir="${javadocs.dir}"/>
    <mkdir dir="${javadocs.dir}"/>

    <copy todir="${javadocs.dir}">
      <fileset dir="${build.javadocs}" />
    </copy>

  </target>

  <target name="local-docs" depends="local-javadocs,local-xdocs"/>

  <!-- Update the www directory -->
  <target name="site-docs" depends="local-docs">

    <mkdir dir="${www.dir}"/>

    <!-- delete all old documents but keep CVS directories -->
    <!-- note that by doing an include the defaultexcludes (CVS dirs) will be kept -->
    <delete>
      <fileset dir="${www.dir}">
        <exclude name="excalibur/**"/>
        <exclude name="logkit/**"/>
        <exclude name="cornerstone/**"/>
        <exclude name="phoenix/**"/>
        <exclude name="testlet/**"/>
      </fileset>
    </delete>


    <copy todir="${www.dir}">
      <fileset dir="${docs.dir}" />
    </copy>

  </target>

  <!-- Creates all the .jar files -->
  <target name="all" depends="compile" description="generates the Avalon jar files">
    <mkdir dir="${build.lib}"/>
    <jar file="${build.lib}/${library.name}.jar" basedir="${build.classes}">
      <include name="mdw/nbio/**"/>
      <exclude name="**/test/*"/>
    </jar>
    <jar file="${build.lib}/${framework.name}.jar" basedir="${build.classes}">
      <include name="mdw/sandStorm/**"/>
      <exclude name="**/test*"/>
    </jar>
    <javah destdir="${jni.dir}" classpath="${build.lib}/${library.name}.jar" force="yes">
      <class name="mdw.nbio.NBIOFileDescriptor"/>
      <class name="mdw.nbio.SelectItem"/>
      <class name="mdw.nbio.NonblockingSocketImpl"/>
      <class name="mdw.nbio.NonblockingSocketInputStream"/>
      <class name="mdw.nbio.NonblockingSocketOutputStream"/>
      <class name="mdw.nbio.SelectSetDevPollImpl"/>
      <class name="mdw.nbio.SelectSetPollImpl"/>
    </javah>
    <exec dir="${jni.dir}" executable="sh" failonerror="yes" output="${build.dir}/jni.configure.log">
      <arg line="configure"/>
    </exec>
    <exec dir="${jni.dir}" executable="make" failonerror="yes" output="${build.dir}/jni.make.log"/>
    <copy todir="${build.lib}">
      <fileset dir="${jni.dir}">
        <include name="*.so"/>
        <include name="*.dll"/>
      </fileset>
    </copy>
  </target>

  <target name="install" depends="all,install-check-cjan">
    <mkdir dir="${cjan.lib}" />
    <copy file="${build.lib}/${framework.name}.jar" todir="${cjan.lib}"/>
  </target>

  <target name="install-check-cjan" unless="cjan.lib">
    <fail message="cjan.lib not specified." />
  </target>

  <target name="uninstall" depends="install-check-cjan">
    <delete file="${build.lib}/${framework.name}.jar" dir="${cjan.lib}"/>
  </target>

  <!-- Create the distribution -->
  <target name="bin-dist" depends="all">

    <mkdir dir="${dist.dir}"/>
    <copy file="${build.lib}/${framework.name}.jar" tofile="${dist.dir}/${framework.name}-${version}.jar"/>
    <copy file="${logkit.jar}" todir="${dist.dir}"/>

    <mkdir dir="${dist.docs}"/>
    <mkdir dir="${dist.javadocs}"/>

    <copy todir="${dist.docs}">
      <fileset dir="${build.docs}"/>
    </copy>

    <copy todir="${dist.javadocs}">
      <fileset dir="${build.javadocs}"/>
    </copy>

    <copy todir="${dist.dir}">
      <fileset dir=".">
        <include name="README"/>
        <include name="KEYS"/>
        <include name="LICENSE"/>
      </fileset>
    </copy>

    <chmod dir="${dist.dir}" perm="go-rwx" />

  </target>

  <!-- Create the source distribution -->
  <target name="src-dist">

    <mkdir dir="${src.dist.dir}" />

    <copy todir="${src.dist.tools}">
      <fileset dir="${tools.dir}"/>
    </copy>

    <copy todir="${src.dist.lib}">
      <fileset dir="${lib.dir}">
        <include name="README" />
      </fileset>
    </copy>

    <copy file="${logkit.jar}" todir="${src.dist.lib}"/>

    <copy todir="${src.dist.src}">
      <fileset dir="${src.dir}"/>
    </copy>

    <copy todir="${src.dist.docs}">
      <fileset dir="${build.docs}"/>
    </copy>

    <copy todir="${src.dist.javadocs}">
      <fileset dir="${build.javadocs}"/>
    </copy>

    <copy todir="${src.dist.dir}">
      <fileset dir=".">
        <include name="README"/>
        <include name="LICENSE"/>
        <include name="KEYS"/>
        <include name="ant.properties.sample"/>
        <include name="build.bat"/>
        <include name="build.sh"/>
        <include name="build.xml"/>
      </fileset>
    </copy>

    <fixcrlf srcdir="${src.dist.dir}" includes="build.sh" eol="lf"/>
    <fixcrlf srcdir="${src.dist.dir}" includes="build.bat" eol="crlf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="*.sh" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="ant" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="antRun" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="*.bat" eol="crlf"/>

    <chmod perm="+x">
      <fileset dir="${src.dist.dir}">
        <include name="build.sh" />
      </fileset>
    </chmod>

    <fixcrlf srcdir="${src.dist.src}/java" includes="**/*.java" eol="lf"/>

    <chmod dir="${src.dist.dir}" perm="go-rwx" />

  </target>

  <!-- Completely build all dists -->
  <target name="dist" depends="site-docs" description="generates the Avalon distribution">
    <mkdir dir="${dist.base}"/>

    <antcall target="bin-dist">
      <param name="dist.dir" value="${dist.name}" />
    </antcall>

    <zip file="${dist.base}/${dist.name}-bin.zip"
         basedir="${dist.name}/.."
         includes="${dist.name}/**"/>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-bin.tar">
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
        <include name="${dist.name}/**"/>
      </tarfileset>
    </tar>

    <gzip zipfile="${dist.base}/${dist.name}-bin.tar.gz"
          src="${dist.base}/${dist.name}-bin.tar"/>

    <delete file="${dist.base}/${dist.name}-bin.tar"/>
    <delete dir="${dist.name}" />

    <antcall target="src-dist">
      <param name="src.dist.dir" value="${dist.name}" />
    </antcall>

    <copy todir="${dist.name}">
      <fileset dir="${src.dist.dir}"/>
    </copy>

    <zip file="${dist.base}/${dist.name}-src.zip"
         basedir="${dist.name}/.."
         includes="${dist.name}/**"/>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-src.tar" >
      <tarfileset dir="${dist.name}/.." mode="755" username="avalon" group="avalon">
        <include name="${dist.name}/build.sh"/>
      </tarfileset>
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
        <include name="${dist.name}/**"/>
        <exclude name="${dist.name}/build.sh"/>
      </tarfileset>
    </tar>

    <gzip zipfile="${dist.base}/${dist.name}-src.tar.gz"
          src="${dist.base}/${dist.name}-src.tar"/>

    <delete file="${dist.base}/${dist.name}-src.tar"/>
    <delete dir="${dist.name}" />
    <delete dir="${src.dist.dir}"/>

  </target>
  
  <target name="sitebook2docbook" description="goes through all the xdocs and transforms them to docbook">
    <style style="${document2docbook}"
           basedir="${context.dir}/xdocs"
           destdir="${build.context}/xdocs"
           extension=".xml"
           includes="*.xml,*/*.xml,*/*/*.xml"/>
  </target>

  <!-- Cleans up build and distribution directories -->
  <target name="clean" depends="setup-properties" description="cleans up the created directories">
    <delete dir="${build.dir}" />
    <delete dir="${dist.dir}" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>

  <!-- Cleans absolutely everything up -->
  <target name="distclean" depends="clean" description="cleans up all generated files and directories">
    <delete dir="${docs.dir}" />
    <delete dir="${dist.base}" />
    <delete dir="${src.dist.dir}" />
    <delete file="Announcement.txt" />
  </target>

</project>
